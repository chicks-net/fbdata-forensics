#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dumper;
use File::Slurp qw(read_file);
#use LWP::Simple qw(get);
use HTML::TreeBuilder;
use DBI;

my ($data_dir) = @ARGV;

# variables
my @keywords;

# main
read_keywords();

my $create_sql = read_file('create.sql');

validate_dir($data_dir);

my $dbh = create_db();

my ($who,$when) = get_download_timestamp();
print "Downloaded $when\n";

#parse_timeline();

parse_messages();

$dbh->disconnect();

# functions
sub read_keywords {
	my $keyfile = "keywords.txt";
	my $key_content = read_file($keyfile);
	chomp($key_content);
	@keywords = split(/\s+/,$key_content);
	print Data::Dumper->Dump([\@keywords],[qw(keywords)]);
}

sub validate_dir {
	my ($data_dir) = @_;

	unless (-d $data_dir) {
		die "not a directory: $data_dir";
	}

	chdir($data_dir) or die "couldn't chdir($data_dir): $!";

	# needed for Download date
	unless (-f 'index.htm') {
		die "no index.htm";
	}

	foreach my $dir (qw( html messages photos videos)) {
		unless (-d $dir) {
			die "no $dir directory";
		}
	}

	# the timeline
	unless (-f 'html/timeline.htm') {
		die "no html/timeline.htm";
	}

	print "$data_dir looks like a Facebook data dump\n";
}

sub create_db {
	my $dbfilename = 'fbdata.sqlite';
	my $create = 0;
	$create = 1 unless -e $dbfilename;
	my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfilename","","") or die "DBI: $DBI::errstr";
	if ($create) {
		print $create_sql;
		$dbh->do($create_sql) or die "DBI: $DBI::errstr";
	}

	return $dbh;
}

sub get_download_timestamp {
	#system("pwd");
	my $index_htm = read_file("index.htm");
	my $index_size = length($index_htm);
	print "got $index_size bytes in index.htm\n";

	my $tree = HTML::TreeBuilder->new;    # empty tree
	$tree->parse_content($index_htm);

#	$tree->dump;
	my $downloaded_div = $tree->look_down('_tag' => 'div', class => 'footer');
	my $downloaded_raw = $downloaded_div->as_text;
	$downloaded_raw =~ /Downloaded by (.+) on (.+)$/;
	my $who = $1;
	my $when = $2;
	return($who,$when);
}

sub parse_timeline {
	my $timeline_htm = read_file("html/timeline.htm");
	my $timeline_size = length($timeline_htm);
	print "got $timeline_size bytes in timeline.htm\n";

	my $tree = HTML::TreeBuilder->new;    # empty tree
	$tree->parse_content($timeline_htm);
	print "parsed timeline\n"; # TODO: include time

	my $contents_div = $tree->look_down('_tag' => 'div', class => 'contents');

	my @posts = $contents_div->look_down('_tag' => 'p');
	my $post_count = scalar @posts;
	print "found $post_count posts\n";

	my %key_counts;
	foreach my $post (@posts) {
		my $comment_div = $post->look_down('_tag' => 'div', class => 'comment');
		my $meta = $post->look_down('_tag' => 'div', class => 'meta')->as_text;
		# TODO: pull out "X Y Z shared a post" part that isn't in a div

		my $comment;
		if (defined $comment_div) {
			$comment = $comment_div->as_text;
		} else {
			$comment = "undefined";
		}

		foreach my $keyword (@keywords) {
			if ($comment =~ /$keyword/i) {
				if (1) {
					print "matched $keyword:\n";
					print "\tmeta=$meta\n";
					print "\tcomment=$comment\n";
				}

				$key_counts{$keyword}++;
			}
		}
	}
	print Data::Dumper->Dump([\%key_counts],[qw(timeline_counts)]);
}

sub parse_messages {
	chdir("messages") or die "failed chdir(messages): $!";

	my %message_meta;
	my @html_files = <[0-9]*.html>;
	foreach my $filename (reverse @html_files) {
		# store metadata
		my $conv_id = $filename;
		$conv_id =~ s/\.html$//;
		$message_meta{$conv_id}{filename} = $filename; 

		# read and parse HTML
		my $conversation_htm = read_file($filename);
		my $conversation_size = length($conversation_htm);
		$message_meta{$conv_id}{filesize} = $conversation_size;
		my $tree = HTML::TreeBuilder->new;    # empty tree
		$tree->parse_content($conversation_htm);

		# who were you talking to?
		my $title = $tree->look_down('_tag' => 'title');
		my $title_txt = $title->as_text;
		my $others = $title_txt;
		$others =~ s/^Conversation with //;
		$message_meta{$conv_id}{others} = $others;

		# How many messsages are there?
		my $thread_div = $tree->look_down('_tag' => 'div', class => 'thread');
		my @message_headers = $thread_div->look_down('_tag' => 'div', class => 'message');
		my $message_count = scalar @message_headers;
		$message_meta{$conv_id}{message_count} = $message_count;
#		my @message_contents = $thread_div->look_down('_tag' => 'p');
#		my $p_count = scalar @message_contents;
#		die "$p_count != $message_count for conv_id=$conv_id" unless $p_count == $message_count;

		my %keyword_counts;
		my $p_count = 0;

		print "going through $message_count messages in conv_id=$conv_id\n";

		foreach my $header (@message_headers) {
			my %msg_rec = (
				type => 'message',
				participant => $others,
				redact => 0,
			);
			my $header_text = $header->as_text();

			# get message and validate
			my $message = $header->right();
			if (defined $message) {
				$p_count++;
			} else {
				die "something weird happened for $header_text";
			}
			unless ($message->tag eq 'p') {
				die "message is not in a p tag for $header_text";
			}

			$msg_rec{content} = $message->as_text;
			$msg_rec{content_html} = $message->as_HTML;

			# get who
			my $speaker = $header->look_down('_tag' => 'span', class => 'user');
			$msg_rec{speaker} = $speaker->as_text;

			# get when
			my $when = $header->look_down('_tag' => 'span', class => 'meta');
			$msg_rec{timestamp} = $when->as_text;

			insert('fb_items',\%msg_rec);
			
			# How many times do keywords show up?
		}
		die "$p_count != $message_count for conv_id=$conv_id" unless $p_count == $message_count;

		# When was the newest message?

		# When was the oldest message?

		# Store in database

#		$tree->dump;
#		die 'code more here';

#		my $downloaded_div = $tree->look_down('_tag' => 'div', class => 'footer');
#		my $downloaded_raw = $downloaded_div->as_text;
#		$downloaded_raw =~ /Downloaded by (.+) on (.+)$/;
#		my $who = $1;
	}
#	print Dumper(\%message_meta);

	chdir("..") or die "failed chdir(..): $!";
	$dbh->disconnect(); die "unimplemented parse msg";
}

sub insert {
	my($tablename,$newrec) = @_;

	my $sql = "insert into $tablename (";
	my @keys = sort keys %$newrec;
	$sql .= join (',',@keys);
	$sql .= ') values (';
	$sql .= join(',', map {$dbh->quote($newrec->{$_})} @keys);
	$sql .= ')';
	$dbh->do($sql) or die "DBI: $DBI::errstr";
}
